name: build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build
    
    - name: Get Dependencies
      run: sudo apt-get update && sudo apt-get install -yq libboost-dev libboost-serialization-dev libboost-program-options-dev help2man libgmp-dev

       
    - name: Checkout Cadical
      uses: actions/checkout@v2
      with:
        repository: meelgroup/cadical
        ref: mate-only-libraries-1.8.0
        path: cadical
        
    - name: Build Cadical
      run: |
       cd cadical
       ./configure
       make -j8
       cd ..

    - name: Checkout Cadiback
      uses: actions/checkout@v2
      with:
        repository: meelgroup/cadiback
        ref: mate
        path: cadiback
        
    - name: Build Cadiback
      run: |
       cd cadiback
       ./configure
       make -j8
       cd ..
    
    - name: Checkout CMS
      uses: actions/checkout@v2
      with:
        repository: msoos/cryptominisat
        ref: 'master'
        path: cryptominisat
    
    - name: Build CMS
      run: |
       cd cryptominisat
       mkdir build && cd build
       cmake ..
       make
       cd ../..

    - name: Build Arjun
      run: |
       cd arjun
       mkdir build && cd build
       cmake ..
       make
       cd ../..
   
    - name: Checkout Arjun
      uses: actions/checkout@v2
      with:
        repository: meelgroup/arjun
        path: arjun
     
    - name: Build Arjun
      run: |
       cd arjun
       mkdir build && cd build
       cmake ..
       make
       cd ../..

    - name: Build Arjun
      run: |
       mkdir arjun_git && cd arjun_git
       git clone --depth 1 https://github.com/meelgroup/arjun
       cd arjun
       mkdir build && cd build
       cmake ..
       make
       cd ../../..

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
